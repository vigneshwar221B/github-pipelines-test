name: CI

on:
  push:
    branches:
      - main
      - feature/**

env:
  CI: true
  NODE_VERSION: 18.x
  TF_VERSION: '1.1.7'
  TF_AGENT_POOL_ID: 'apool-3BXHFcvMX5e3gvMT'
  BASE_INFRA_FOLDER: 'base_infra'

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install Dependencies
        run: yarn --frozen-lockfile
      - name: Yarn Audit
        run: |
          yarn audit --level high | tee yarn-audit.txt
          exit $(grep -c "^Severity:.*High$" yarn-audit.txt)
      - run: yarn run test
      - name: Create Release Version
        run: yarn semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.SEMANTIC_RELEASE_TOKEN }}
      - run: yarn run build
      - name: Upload Lambda Package
        uses: actions/upload-artifact@v3
        with:
          name: lambda-package
          path: dist/**/*.zip
      - name: Upload Synthetics Package
        uses: actions/upload-artifact@v3
        with:
          name: synthetics-package
          path: synthetics/**
      - name: Send Chat Fail Notification
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_TEST_NOTIFICATIONS }}
          jobName: 'Switchboard Build Phase'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  deploy_feature:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    needs: build
    environment: feature
    if: startsWith( github.ref, 'refs/heads/feature/')
    defaults:
      run:
        working-directory: terraform
    outputs:
      api_url: ${{ steps.tf_output.outputs.api_url }}
      aws_region: ${{steps.tf_output.outputs.aws_region}}
      aws_account_id: ${{ steps.tf_output.outputs.aws_account_id }}
      cognito_details_ssm_name: ${{ steps.tf_output.outputs.cognito_details_ssm_name}}
      api_automation_phone_number_ssm_name: ${{ steps.tf_output.outputs.api_automation_phone_number_ssm_name }}
      dtmf_test_sma_lambda_handler_name: ${{ steps.tf_output.outputs.dtmf_test_sma_lambda_handler_name }}
      sma_handler_lambda_name: ${{ steps.tf_output.outputs.sma_handler_lambda_name }}
      sip_rule_ssm_param: ${{ steps.tf_output.outputs.sip_rule_ssm_param }}
      dtmf_automation_dynamodb_name: ${{ steps.tf_output.outputs.dtmf_automation_dynamodb_name }}
      switchboard_dynamodb_name: ${{ steps.tf_output.outputs.switchboard_dynamodb_name }}
      primary_region_invoke_url: ${{ steps.tf_output.outputs.primary_region_invoke_url }}
      english_fast_vrs_number: ${{steps.tf_output.outputs.english_fast_vrs_number}}
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Download Synthetics Packages
        uses: actions/download-artifact@v3
        with:
          name: synthetics-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Determine JIRA ID from branch name
        id: jira_regex
        run: |
          echo issue_id=$(echo "$GITHUB_REF_NAME" | grep -o -E "[a-zA-Z0-9,\.\_\-]+-[0-9]+") | tr '[:upper:]' '[:lower:]' >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-${{ steps.jira_regex.outputs.issue_id }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=feature.tfvars
        env:
          TF_VAR_environment: '${{ steps.jira_regex.outputs.issue_id }}'
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Terraform Apply
        env:
          TF_VAR_environment: '${{ steps.jira_regex.outputs.issue_id }}'
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
        id: apply
        run: terraform apply -var-file=feature.tfvars --auto-approve
      - name: Collect Terraform Outputs
        id: tf_output
        run: |
          echo "api_url=$(terraform output api_gateway_canonical_url)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "aws_account_id=$(terraform output --raw aws_account_id)" >> $GITHUB_OUTPUT
          echo "cognito_details_ssm_name=$(terraform output --raw cognito_details_ssm_name)" >> $GITHUB_OUTPUT
          echo "api_automation_phone_number_ssm_name=$(terraform output --raw api_automation_phone_number_ssm_param_name)" >> $GITHUB_OUTPUT
          echo "dtmf_test_sma_lambda_handler_name=$(terraform output --raw dtmf_test_sma_lambda_handler_name)" >> $GITHUB_OUTPUT
          echo "sma_handler_lambda_name=$(terraform output --raw sma_handler_lambda_name)" >> $GITHUB_OUTPUT
          echo "sip_rule_ssm_param=$(terraform output --raw sip_rule_ssm_param)" >> $GITHUB_OUTPUT
          echo "dtmf_automation_dynamodb_name=$(terraform output --raw dtmf_automation_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "switchboard_dynamodb_name=$(terraform output --raw switchboard_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "primary_region_invoke_url=$(terraform output --raw api_gateway_invoke_url)" >> $GITHUB_OUTPUT
          echo "english_fast_vrs_number=$(terraform output --raw english_fast_vrs_number)" >> $GITHUB_OUTPUT
      # This exists as a feature branch testing option. If you need to test notifications, set dry_run to false
      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main # set this to your feature branch
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_TEST_NOTIFICATIONS }} # sends to test channel, not main chat
          jobName: 'Feature Deploy'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'
          dryRun: true

  func_test_api_feature:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: deploy_feature
    environment: feature
    if: startsWith( github.ref, 'refs/heads/feature/')
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-region: ${{ needs.deploy_feature.outputs.aws_region }}
          role-to-assume: arn:aws:iam::${{ needs.deploy_feature.outputs.aws_account_id }}:role/github-actions
      - name: Execute the API Tests
        run: yarn run test:api
        env:
          AWS_REGION: ${{ needs.deploy_feature.outputs.aws_region }}
          SWITCHBOARD_URL: ${{ needs.deploy_feature.outputs.primary_region_invoke_url }}
          COGNITO_SERVICE_ACCOUNT_USERNAME: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          COGNITO_SERVICE_ACCOUNT_PASSWORD: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          COGNITO_DETAILS_SSM_NAME: ${{ needs.deploy_feature.outputs.cognito_details_ssm_name }}
          API_AUTOMATION_PHONE_NUMBER_SSM_NAME: ${{ needs.deploy_feature.outputs.api_automation_phone_number_ssm_name }}
          DTMF_AUTOMATION_TEST_SMA_LAMBDA_HANDLER_NAME: ${{ needs.deploy_feature.outputs.dtmf_test_sma_lambda_handler_name }}
          SMA_HANDLER_LAMBDA_NAME: ${{  needs.deploy_feature.outputs.sma_handler_lambda_name }}
          SIP_RULE_SSM_PARAM: ${{  needs.deploy_feature.outputs.sip_rule_ssm_param }}
          DTMF_AUTOMATION_DYNAMODB_NAME: ${{  needs.deploy_feature.outputs.dtmf_automation_dynamodb_name }}
          SWITCHBOARD_DYNAMODB_NAME: ${{  needs.deploy_feature.outputs.switchboard_dynamodb_name }}
          ENGLISH_VRS_NUMBER: ${{  needs.deploy_feature.outputs.english_fast_vrs_number }}
      - name: Send Chat Fail Notification
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'
  
  check_if_folder_has_changed:
    name: Check if files have changed in a specific folder
    if: ${{ github.ref == 'refs/heads/main' }}
    outputs:
      run_job: ${{ steps.check_files.outputs.run_job }}
    runs-on: ubuntu-latest
    env:
      DIRECTORY_TO_CHECK: ${{ env.BASE_INFRA_FOLDER }}
    steps:
      - uses: actions/checkout@v3
      - name: check modified files
        id: check_files
        run: |
          echo "=============== list modified files ==============="
          # Check for changes in the specified directory
          git diff --name-only HEAD^ HEAD "$DIRECTORY_TO_CHECK/"
          
          echo "========== check if there are modified files =========="
          if [[ -n $(git diff --name-only HEAD^ HEAD "$DIRECTORY_TO_CHECK/") ]]; then
            echo "There are modified files in the '$DIRECTORY_TO_CHECK' folder."
            echo "run_job=true" >> "$GITHUB_OUTPUT"
          else
            echo "There are no modified files in the '$DIRECTORY_TO_CHECK' folder."
            echo "run_job=false" >> "$GITHUB_OUTPUT"
          fi

  deploy_dev_infra:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: dev
    needs: build
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: base_infra
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-dev-infra-primary-region
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=dev-primary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
      - name: Terraform Apply
        id: apply
        run: terraform apply -var-file=dev-primary.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
      # need to add apply and also terraform outputs
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-dev-infra-secondary-region
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init Secondary Region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Validate Secondary Region
        id: validate_secondary_region
        run: terraform validate
      - name: Terraform Plan Secondary Region
        id: plan_secondary_region
        run: terraform plan -var-file=dev-secondary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
      - name: Terraform Apply
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
        id: apply-dev
        run: terraform apply -var-file=dev-secondary.tfvars --auto-approve

      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'
  
  deploy_dev:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: dev
    needs: deploy_dev_infra
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: terraform
    outputs:
      api_url: ${{ steps.tf_output.outputs.api_url }}
      aws_region: ${{steps.tf_output.outputs.aws_region}}
      aws_account_id: ${{ steps.tf_output.outputs.aws_account_id }}
      cognito_details_ssm_name: ${{ steps.tf_output.outputs.cognito_details_ssm_name}}
      api_automation_phone_number_ssm_name: ${{ steps.tf_output.outputs.api_automation_phone_number_ssm_name }}
      dtmf_test_sma_lambda_handler_name: ${{ steps.tf_output.outputs.dtmf_test_sma_lambda_handler_name }}
      sma_handler_lambda_name: ${{ steps.tf_output.outputs.sma_handler_lambda_name }}
      sip_rule_ssm_param: ${{ steps.tf_output.outputs.sip_rule_ssm_param }}
      dtmf_automation_dynamodb_name: ${{ steps.tf_output.outputs.dtmf_automation_dynamodb_name }}
      switchboard_dynamodb_name: ${{ steps.tf_output.outputs.switchboard_dynamodb_name }}
      primary_region_url: ${{ steps.tf_output.outputs.primary_region_url }}
      primary_region_invoke_url: ${{ steps.tf_output.outputs.primary_region_invoke_url }}
      english_fast_vrs_number: ${{steps.tf_output.outputs.english_fast_vrs_number}}
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Download Synthetics Packages
        uses: actions/download-artifact@v3
        with:
          name: synthetics-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-dev
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=dev-primary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}

      - name: Terraform Apply on primary region
        id: apply
        run: terraform apply -var-file=dev-primary.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Collect Terraform Outputs for primary region
        id: tf_output
        run: |
          echo "api_url=$(terraform output api_gateway_canonical_url)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "aws_account_id=$(terraform output --raw aws_account_id)" >> $GITHUB_OUTPUT
          echo "cognito_details_ssm_name=$(terraform output --raw cognito_details_ssm_name)" >> $GITHUB_OUTPUT
          echo "api_automation_phone_number_ssm_name=$(terraform output --raw api_automation_phone_number_ssm_param_name)" >> $GITHUB_OUTPUT
          echo "dtmf_test_sma_lambda_handler_name=$(terraform output --raw dtmf_test_sma_lambda_handler_name)" >> $GITHUB_OUTPUT
          echo "sma_handler_lambda_name=$(terraform output --raw sma_handler_lambda_name)" >> $GITHUB_OUTPUT
          echo "sip_rule_ssm_param=$(terraform output --raw sip_rule_ssm_param)" >> $GITHUB_OUTPUT
          echo "dtmf_automation_dynamodb_name=$(terraform output --raw dtmf_automation_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "switchboard_dynamodb_name=$(terraform output --raw switchboard_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "primary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "primary_region_invoke_url=$(terraform output --raw api_gateway_invoke_url)" >> $GITHUB_OUTPUT
          echo "us_east_1_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "primary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
          echo "websocket_domain_name=$(terraform output --raw websocket_domain_name)" >> $GITHUB_OUTPUT
          echo "english_fast_vrs_number=$(terraform output --raw english_fast_vrs_number)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for secondary region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          # need to update terraform workspace name for dev
          terraformWorkspaceName: ${{ github.event.repository.name }}-dev-secondary
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init on secondary region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Plan on secondary region
        id: plan_secondary_region
        run: terraform plan -var-file=dev-secondary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Terraform Apply on secondary region
        id: apply_secondary_region
        run: terraform apply -var-file=dev-secondary.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.DEV_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Collect Terraform Outputs for secondary region
        id: tf_output_secondary_region
        run: |
          echo "secondary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "hosted_zone_id=$(terraform output --raw hosted_zone_id)" >> $GITHUB_OUTPUT
          echo "domain_name=$(terraform output --raw domain_name)" >> $GITHUB_OUTPUT
          echo "environment=$(terraform output --raw environment)" >> $GITHUB_OUTPUT
          echo "us_west_2_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "secondary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for Multi Region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-dev-mr
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: terraform/multi-region
      - name: Terraform Init for Multi region
        id: init_mr
        run: terraform init
        working-directory: terraform/multi-region
      - name: Terraform Plan for Multi region
        id: plan_mr
        run: terraform plan
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.secondary_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Terraform Apply for Multi region
        id: apply_mr
        run: terraform apply --auto-approve
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.aws_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  func_test_api_dev:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: deploy_dev
    environment: dev
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ needs.deploy_dev.outputs.aws_region }}
          role-to-assume: arn:aws:iam::${{ needs.deploy_dev.outputs.aws_account_id }}:role/github-actions
      - name: Execute the API Tests
        run: yarn run test:api
        env:
          AWS_REGION: ${{ needs.deploy_dev.outputs.aws_region }}
          SWITCHBOARD_URL: ${{ needs.deploy_dev.outputs.primary_region_invoke_url }}
          COGNITO_SERVICE_ACCOUNT_USERNAME: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          COGNITO_SERVICE_ACCOUNT_PASSWORD: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          COGNITO_DETAILS_SSM_NAME: ${{ needs.deploy_dev.outputs.cognito_details_ssm_name }}
          API_AUTOMATION_PHONE_NUMBER_SSM_NAME: ${{ needs.deploy_dev.outputs.api_automation_phone_number_ssm_name }}
          DTMF_AUTOMATION_TEST_SMA_LAMBDA_HANDLER_NAME: ${{ needs.deploy_dev.outputs.dtmf_test_sma_lambda_handler_name }}
          SMA_HANDLER_LAMBDA_NAME: ${{  needs.deploy_dev.outputs.sma_handler_lambda_name }}
          SIP_RULE_SSM_PARAM: ${{  needs.deploy_dev.outputs.sip_rule_ssm_param }}
          DTMF_AUTOMATION_DYNAMODB_NAME: ${{  needs.deploy_dev.outputs.dtmf_automation_dynamodb_name }}
          SWITCHBOARD_DYNAMODB_NAME: ${{  needs.deploy_dev.outputs.switchboard_dynamodb_name }}
          ENGLISH_VRS_NUMBER: ${{  needs.deploy_dev.outputs.english_fast_vrs_number }}
      - name: Send Chat Fail Notification
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  deploy_qa_infra:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: qa
    needs: func_test_api_dev
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: base_infra
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-qa-infra-primary-region
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=qa-primary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
      - name: Terraform Apply
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
        id: apply
        run: terraform apply -var-file=qa-primary.tfvars --auto-approve

      #need to add apply and also terraform outputs
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-qa-infra-secondary-region
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init Secondary Region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Validate Secondary Region
        id: validate_secondary_region
        run: terraform validate
      - name: Terraform Plan Secondary Region
        id: plan_secondary_region
        run: terraform plan -var-file=qa-secondary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
      - name: Terraform Apply
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
        id: apply-qa
        run: terraform apply -var-file=qa-secondary.tfvars --auto-approve

      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  deploy_qa:
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: qa
    needs: deploy_qa_infra
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: terraform
    outputs:
      api_url: ${{ steps.tf_output.outputs.api_url }}
      aws_region: ${{steps.tf_output.outputs.aws_region}}
      aws_account_id: ${{ steps.tf_output.outputs.aws_account_id }}
      cognito_details_ssm_name: ${{ steps.tf_output.outputs.cognito_details_ssm_name}}
      api_automation_phone_number_ssm_name: ${{ steps.tf_output.outputs.api_automation_phone_number_ssm_name }}
      dtmf_test_sma_lambda_handler_name: ${{ steps.tf_output.outputs.dtmf_test_sma_lambda_handler_name }}
      sma_handler_lambda_name: ${{ steps.tf_output.outputs.sma_handler_lambda_name }}
      sip_rule_ssm_param: ${{ steps.tf_output.outputs.sip_rule_ssm_param }}
      dtmf_automation_dynamodb_name: ${{ steps.tf_output.outputs.dtmf_automation_dynamodb_name }}
      switchboard_dynamodb_name: ${{ steps.tf_output.outputs.switchboard_dynamodb_name }}
      primary_region_url: ${{ steps.tf_output.outputs.primary_region_url }}
      primary_region_invoke_url: ${{ steps.tf_output.outputs.primary_region_invoke_url }}
      english_fast_vrs_number: ${{steps.tf_output.outputs.english_fast_vrs_number}}
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Download Synthetics Packages
        uses: actions/download-artifact@v3
        with:
          name: synthetics-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-qa
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=qa-primary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Terraform Apply on primary region
        id: apply
        run: terraform apply -var-file=qa-primary.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Collect Terraform Outputs for primary region
        id: tf_output
        run: |
          echo "api_url=$(terraform output api_gateway_canonical_url)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "aws_account_id=$(terraform output --raw aws_account_id)" >> $GITHUB_OUTPUT
          echo "cognito_details_ssm_name=$(terraform output --raw cognito_details_ssm_name)" >> $GITHUB_OUTPUT
          echo "api_automation_phone_number_ssm_name=$(terraform output --raw api_automation_phone_number_ssm_param_name)" >> $GITHUB_OUTPUT
          echo "dtmf_test_sma_lambda_handler_name=$(terraform output --raw dtmf_test_sma_lambda_handler_name)" >> $GITHUB_OUTPUT
          echo "sma_handler_lambda_name=$(terraform output --raw sma_handler_lambda_name)" >> $GITHUB_OUTPUT
          echo "sip_rule_ssm_param=$(terraform output --raw sip_rule_ssm_param)" >> $GITHUB_OUTPUT
          echo "dtmf_automation_dynamodb_name=$(terraform output --raw dtmf_automation_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "switchboard_dynamodb_name=$(terraform output --raw switchboard_dynamodb_name)" >> $GITHUB_OUTPUT
          echo "primary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "primary_region_invoke_url=$(terraform output --raw api_gateway_invoke_url)" >> $GITHUB_OUTPUT
          echo "us_east_1_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "primary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
          echo "websocket_domain_name=$(terraform output --raw websocket_domain_name)" >> $GITHUB_OUTPUT
          echo "english_fast_vrs_number=$(terraform output --raw english_fast_vrs_number)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for secondary region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-qa-secondary-region
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init on secondary region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Plan on secondary region
        id: plan_secondary_region
        run: terraform plan -var-file=qa-secondary.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Terraform Apply on secondary region
        id: apply_secondary_region
        run: terraform apply -var-file=qa-secondary.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.QA_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_dt_connection_auth_token: ${{ secrets.DT_CONNECTION_AUTH_TOKEN }}
      - name: Collect Terraform Outputs for secondary region
        id: tf_output_secondary_region
        run: |
          echo "secondary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "hosted_zone_id=$(terraform output --raw hosted_zone_id)" >> $GITHUB_OUTPUT
          echo "domain_name=$(terraform output --raw domain_name)" >> $GITHUB_OUTPUT
          echo "environment=$(terraform output --raw environment)" >> $GITHUB_OUTPUT
          echo "us_west_2_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "secondary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for Multi Region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-qa-mr
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: terraform/multi-region
      - name: Terraform Init for Multi region
        id: init_mr
        run: terraform init
        working-directory: terraform/multi-region
      - name: Terraform Plan for Multi region
        id: plan_mr
        run: terraform plan
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.aws_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Terraform Apply for Multi region
        id: apply_mr
        run: terraform apply --auto-approve
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.aws_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  func_test_api_qa:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    needs: deploy_qa
    environment: qa
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
      - name: Install dependencies
        run: yarn --frozen-lockfile
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-region: ${{ needs.deploy_qa.outputs.aws_region }}
          role-to-assume: arn:aws:iam::${{ needs.deploy_qa.outputs.aws_account_id }}:role/github-actions
      - name: Execute the API Tests
        run: yarn run test:api
        env:
          SWITCHBOARD_URL: ${{ needs.deploy_qa.outputs.primary_region_invoke_url }}
          AWS_REGION: ${{ needs.deploy_qa.outputs.aws_region }}
          COGNITO_SERVICE_ACCOUNT_USERNAME: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          COGNITO_SERVICE_ACCOUNT_PASSWORD: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.DEV_QA_MESSENGER_URL}}
          COGNITO_DETAILS_SSM_NAME: ${{ needs.deploy_qa.outputs.cognito_details_ssm_name }}
          API_AUTOMATION_PHONE_NUMBER_SSM_NAME: ${{ needs.deploy_qa.outputs.api_automation_phone_number_ssm_name }}
          DTMF_AUTOMATION_TEST_SMA_LAMBDA_HANDLER_NAME: ${{ needs.deploy_qa.outputs.dtmf_test_sma_lambda_handler_name }}
          SMA_HANDLER_LAMBDA_NAME: ${{  needs.deploy_qa.outputs.sma_handler_lambda_name }}
          SIP_RULE_SSM_PARAM: ${{  needs.deploy_qa.outputs.sip_rule_ssm_param }}
          DTMF_AUTOMATION_DYNAMODB_NAME: ${{  needs.deploy_qa.outputs.dtmf_automation_dynamodb_name }}
          SWITCHBOARD_DYNAMODB_NAME: ${{  needs.deploy_qa.outputs.switchboard_dynamodb_name }}
          ENGLISH_VRS_NUMBER: ${{  needs.deploy_qa.outputs.english_fast_vrs_number }}
      - name: Send Chat Fail Notification
        if: ${{ failure() && github.ref == 'refs/heads/main' }}
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  deploy_prod_infra:
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: 'prod-na'
            primary_region_tf_var_file: 'prod-na-primary'
            primary_region_name: 'prod-na-primary'
            # second_region_name
            secondary_region_tf_var_file: 'prod-na-secondary'
            second_region_name: 'prod-na-secondary'
          - environment: 'prod-eur'
            primary_region_tf_var_file: 'prod-eur-primary'
            primary_region_name: 'prod-eur-primary'
            # second_region_name
            secondary_region_tf_var_file: 'prod-eur-secondary'
            second_region_name: 'prod-eur-secondary'
          - environment: 'prod-apse'
            primary_region_tf_var_file: 'prod-apse-primary'
            primary_region_name: 'prod-apse-primary'
            # second_region_name
            secondary_region_tf_var_file: 'prod-apse-secondary'
            second_region_name: 'prod-apse-secondary'
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: prod-base-infra
    needs:
      - func_test_api_qa
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: base_infra
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-infra-${{ matrix.primary_region_name }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=${{ matrix.primary_region_tf_var_file }}.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Terraform Apply
        id: apply
        run: terraform apply -var-file=${{ matrix.primary_region_tf_var_file }}.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Set Up Terraform Workspace for second region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-infra-${{ matrix.second_region_name }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: base_infra
      - name: Terraform Init on second region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Plan on second region
        id: plan_secondary_region
        run: terraform plan -var-file=${{ matrix.secondary_region_tf_var_file }}.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Terraform Apply on second region
        id: apply_secondary_region
        run: terraform apply -var-file=${{ matrix.secondary_region_tf_var_file }}.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'

  deploy_prod:
    strategy:
      max-parallel: 1
      matrix:
        include:
          - environment: 'prod-na'
            tf_var_file: 'prod-na-primary'
            # second_region_name: This name/workspace is used to serves half of the traffic
            second_region_name: 'prod-na-uw2'
            secondary_tf_var_file: 'prod-na-secondary'
            # # multi_region_name: This name/workspace is used to created DNS and traffic policies for both the regions
            multi_region_name: 'prod-na-mr'
          - environment: 'prod-eur'
            tf_var_file: 'prod-eur-primary'
            second_region_name: 'prod-eur-secondary'
            multi_region_name: 'prod-eur-mr'
            secondary_tf_var_file: prod-eur-secondary
          - environment: 'prod-apse'
            tf_var_file: 'prod-apse-primary'
            second_region_name: 'prod-apse-secondary'
            multi_region_name: 'prod-apse-mr'
            secondary_tf_var_file: prod-apse-secondary
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    environment: prod
    needs:
      - deploy_prod_infra
    if: ${{ github.ref == 'refs/heads/main' }}
    defaults:
      run:
        working-directory: terraform
    steps:
      - uses: actions/checkout@v3
      - name: Download Lambda Packages
        uses: actions/download-artifact@v3
        with:
          name: lambda-package
          path: terraform
      - name: Download Synthetics Packages
        uses: actions/download-artifact@v3
        with:
          name: synthetics-package
          path: terraform
      - name: Use Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ env.TF_VERSION }}
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false
      - name: Terraform Format
        id: fmt
        run: terraform fmt -check
      - name: Set Up Terraform Workspace
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-${{ matrix.environment }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate
      - name: Terraform Plan
        id: plan
        run: terraform plan -var-file=${{ matrix.tf_var_file }}.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Terraform Apply
        id: apply
        run: terraform apply -var-file=${{ matrix.tf_var_file }}.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
      - name: Collect Terraform Outputs
        id: tf_output
        run: |
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "aws_account_id=$(terraform output --raw aws_account_id)" >> $GITHUB_OUTPUT
          echo "api_url=$(terraform output api_gateway_canonical_url)" >> $GITHUB_OUTPUT
          echo "primary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "us_east_1_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "primary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
          echo "websocket_domain_name=$(terraform output --raw websocket_domain_name)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for second region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-${{ matrix.second_region_name }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
      - name: Terraform Init on second region
        id: init_secondary_region
        run: terraform init
      - name: Terraform Plan on second region
        id: plan_secondary_region
        run: terraform plan -var-file=${{ matrix.secondary_tf_var_file }}.tfvars
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
          TF_VAR_isSecondaryRegion: true
      - name: Terraform Apply on second region
        id: apply_secondary_region
        run: terraform apply -var-file=${{ matrix.secondary_tf_var_file }}.tfvars --auto-approve
        env:
          TF_VAR_aws_account_id: '${{ vars.PROD_AWS_ACCOUNT_ID}}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
          TF_VAR_isSecondaryRegion: true
      - name: Collect Terraform Outputs for second region
        id: tf_output_secondary_region
        run: |
          echo "secondary_region_url=$(terraform output --raw custom_domain_url)" >> $GITHUB_OUTPUT
          echo "hosted_zone_id=$(terraform output --raw hosted_zone_id)" >> $GITHUB_OUTPUT
          echo "domain_name=$(terraform output --raw domain_name)" >> $GITHUB_OUTPUT
          echo "environment=$(terraform output --raw environment)" >> $GITHUB_OUTPUT
          echo "us_west_2_synthetic_health_check_id=$(terraform output --raw synthetic_health_check_id)" >> $GITHUB_OUTPUT
          echo "aws_region=$(terraform output --raw aws_region)" >> $GITHUB_OUTPUT
          echo "secondary_websocket_url=$(terraform output --raw websocket_url)" >> $GITHUB_OUTPUT
      - name: Set Up Terraform Workspace for Multi Region
        uses: sorenson-eng/shared-github-actions/create-tf-cloud-workspace@main
        with:
          apiToken: ${{ secrets.TF_API_TOKEN }}
          teamID: team-9oiEbg9n7LRqH8ch
          terraformWorkspaceName: ${{ github.event.repository.name }}-deploy-${{ matrix.multi_region_name }}
          tfVarSet: varset-f2C3DJRZHGfvpwdR
          terraformDir: terraform/multi-region
      - name: Terraform Init for Multi region
        id: init_mr
        run: terraform init
        working-directory: terraform/multi-region
      - name: Terraform Plan for Multi region
        id: plan_mr
        run: terraform plan
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.aws_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Terraform Apply for Multi region
        id: apply_mr
        run: terraform apply --auto-approve
        working-directory: terraform/multi-region
        env:
          TF_VAR_aws_account_id: '${{ steps.tf_output.outputs.aws_account_id}}'
          TF_VAR_provider_region: '${{ steps.tf_output.outputs.aws_region}}'
          TF_VAR_primary_region_url: '${{ steps.tf_output.outputs.primary_region_url }}'
          TF_VAR_secondary_region_url: '${{ steps.tf_output_secondary_region.outputs.secondary_region_url }}'
          TF_VAR_hosted_zone_id: '${{ steps.tf_output_secondary_region.outputs.hosted_zone_id }}'
          TF_VAR_domain_name: '${{ steps.tf_output_secondary_region.outputs.domain_name}}'
          TF_VAR_environment: '${{ steps.tf_output_secondary_region.outputs.environment }}'
          TF_VAR_cognito_username: ${{ secrets.COGNITO_SERVICE_ACCOUNT_USERNAME}}
          TF_VAR_cognito_password: ${{ secrets.COGNITO_SERVICE_ACCOUNT_PASSWORD}}
          TF_VAR_region_1_health_check_id: ${{ steps.tf_output.outputs.us_east_1_synthetic_health_check_id }}
          TF_VAR_region_2_health_check_id: ${{ steps.tf_output_secondary_region.outputs.us_west_2_synthetic_health_check_id }}
          TF_VAR_teams_url: ${{ secrets.PROD_MESSENGER_URL}}
          TF_VAR_primary_region: ${{ steps.tf_output.outputs.aws_region }}
          TF_VAR_secondary_region: ${{ steps.tf_output_secondary_region.outputs.aws_region }}
          TF_VAR_primary_websocket_url: ${{ steps.tf_output.outputs.primary_websocket_url }}
          TF_VAR_secondary_websocket_url: ${{ steps.tf_output_secondary_region.outputs.secondary_websocket_url }}
          TF_VAR_websocket_domain_name: ${{ steps.tf_output.outputs.websocket_domain_name }}
      - name: Send Chat Fail Notification
        if: failure()
        uses: sorenson-eng/shared-github-actions/send-teams-notification@main
        with:
          TeamsWebhookUrl: ${{ secrets.MSTEAMS_WEBHOOK }}
          jobName: '${{ github.job }}'
          jobUrl: '${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}'
          jobRepo: ${{ github.repository }}
          triggeredBy: '${{ github.actor }}'
